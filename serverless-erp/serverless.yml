org: jayaganesh
app: serverless-erp
service: serverless-erp

stages:
  default:
    params:
      tableName: "erp-table-${sls:stage}"

package:
  patterns:
    - swagger/*

plugins:
  - serverless-auto-swagger

custom:
  autoswagger:
    typefiles: ["./src/model/apiResponse.ts", "./src/model/invoice.ts"]

provider:
  name: aws
  runtime: nodejs22.x
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
            - dynamodb:DeleteItem
          Resource:
            - Fn::GetAtt: [ErpTable, Arn]
            - Fn::Join:
                - ""
                - - Fn::GetAtt: [ErpTable, Arn]
                  - "/index/*"
  environment:
    DDB_TABLE_NAME: ${param:tableName}

functions:
  getInvoices:
    # name: invoice-handler-${sls:stage}
    handler: src/handlers/getInvoices.handler
    events:
      - http:
          method: get
          path: invoices
          request:
            parameters:
              querystrings:
                customerId: false
                paymentStatus: false
                date: false
                nextToken: false
                limit: false
          responseData:
            {
              200:
                {
                  description: "Invoice Data",
                  bodyType: "GetInvoicesResponse",
                },
              500:
                {
                  description: "Internal server error",
                  bodyType: "ErrorResponse",
                },
            }
    environment:
      DDB_TABLE_NAME: ${param:tableName}

  getInvoice:
    handler: src/handlers/getInvoice.handler
    events:
      - http:
          method: get
          path: invoice/{invoiceId}
          request:
            parameters:
              paths:
                invoiceId: true
          responseData:
            {
              200:
                { description: "Invoice Data", bodyType: "GetInvoiceResponse" },
              500:
                {
                  description: "Internal server error",
                  bodyType: "ErrorResponse",
                },
            }
    environment:
      DDB_TABLE_NAME: ${param:tableName}

  createInvoice:
    handler: src/handlers/createInvoice.handler
    events:
      - http:
          method: post
          path: invoice
          bodyType: CreateInvoiceRequest
          responseData:
            {
              200:
                {
                  description: "Invoice Created",
                  bodyType: "CreateInvoiceResponse",
                },
              500:
                {
                  description: "Internal server error",
                  bodyType: "ErrorResponse",
                },
            }
          request:
            schemas:
              application/json: ${file(api_gateway_schema/createInvoice.json)}

    environment:
      DDB_TABLE_NAME: ${param:tableName}

  updatePaymentStatus:
    handler: src/handlers/updatePaymentStatus.handler
    events:
      - http:
          method: put
          path: invoice/{invoiceId}/payment-status
          bodyType: UpdatePaymentStatusRequest
          responseData:
            {
              200:
                {
                  description: "Payment Status Updated",
                  bodyType: "UpdatePaymentStatusResponse",
                },
              404:
                { description: "Invoice not found", bodyType: "ErrorResponse" },
              500:
                {
                  description: "Internal server error",
                  bodyType: "ErrorResponse",
                },
            }
          request:
            schemas:
              application/json: ${file(api_gateway_schema/updatePaymentStatus.json)}
    environment:
      DDB_TABLE_NAME: ${param:tableName}
resources:
  Resources:
    ErpTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: PK
            AttributeType: S
          - AttributeName: SK
            AttributeType: S
          - AttributeName: entityType
            AttributeType: S
          - AttributeName: customerId
            AttributeType: S
          - AttributeName: paymentStatus
            AttributeType: S
        KeySchema:
          - AttributeName: PK
            KeyType: HASH
          - AttributeName: SK
            KeyType: RANGE
        # GSI
        GlobalSecondaryIndexes:
          - IndexName: entityTypeCustomerIdIndex
            KeySchema:
              - AttributeName: entityType
                KeyType: HASH
              - AttributeName: customerId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: entityTypePaymentStatusIndex
            KeySchema:
              - AttributeName: entityType
                KeyType: HASH
              - AttributeName: paymentStatus
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: entityTypeSKIndex
            KeySchema:
              - AttributeName: entityType
                KeyType: HASH
              - AttributeName: SK
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
        TableName: ${param:tableName}
